
import json

from pyramid_layout.panel import panel_config

@panel_config(
    name='header_sitemenu',
    renderer='templates/panel_header_sitemenu.pt'
)
def header_sitemenu(context, request, items=None):
    # If items are passed in, use items, otherwise use SDI concept of
    # what should show up in the site menu
    url = request.url
    items = [
        dict(
            title="Home",
            url=request.application_url,
            active='active' if 'contents' not in url else ''
        ),
        dict(
            title="Contents",
            url=request.application_url + '/contents',
            active='active' if 'contents' in url else ''
        ),
    ]
    return dict(items=items)

@panel_config(
    name='grid',
    renderer='templates/grid_panel.pt'
)
def grid(context, request, columns, items,
        html_id=None,          # html id can be specified or autogenerated.
        slickgrid_options=None,   # options dict will be passed to js widget
        config_name='slickgrid-config',  # uses config defined in slickgrid-config.js as a data attribute
        ):
    # Show a grid with the columns and items
    # XXX right now they are ignored though
    old_columns = columns
    old_items = items

    layout = request.layout_manager.layout
    html_id = layout.html_id(html_id=html_id)    # autogenerate id if needed
    layout.select_client_component('slickgrid')
    slickgrid_options = dict(
        # default options for SlickGrid come here
        editable = False,
        enableAddRow = False,
        enableCellNavigation = True,
        asyncEditorLoading = True,
        forceFitColumns = True,
        )
    slickgrid_options.update(slickgrid_options or {})


    # XXX some help for debugging
    #
    # To begin with, we provide this static definition.
    #columns = [
    #    { #"id": "author",
    #        "name": "Author", "field": "author", "width": 120, "minWidth": 120,
    #        "cssClass": "cell-author", "editor": "text",
    #        "validator": "required", "sortable": True},
    #    { #"id": "title",
    #        "name": "Title", "field": "title", "width": 120, "minWidth": 120,
    #        "cssClass": "cell-title", "editor": "text",
    #        "validator": "required", "sortable": True},
    #    ]
 
    # ... another working example:
    #columns = [
    #    {"id": "sel", "name": "#", "field": "num", "behavior": "select",
    #        "cssClass": "cell-selection", "width": 40, "cannotTriggerInsert": True,
    #        "resizable": False, "selectable": False},
    #    {"id": "title", "name": "Title", "field": "title", "width": 120, "minWidth": 120,
    #        "cssClass": "cell-title", "editor": "text",
    #        "validator": "required", "sortable": True},
    #    {"id": "duration", "name": "Duration", "field": "duration",
    #        "editor": "text", "sortable": True},
    #    {"id": "start", "name": "Start", "field": "start", "minWidth": 60,
    #        "editor": "date", "sortable": True},
    #    {"id": "finish", "name": "Finish", "field": "finish", "minWidth": 60,
    #        "editor": "date", "sortable": True}
    #    ];

    return dict(
        old_columns = columns,
        old_items = old_items,
        #
        html_id=html_id,
        widget_options=json.dumps(dict(
            columns = columns,
            configName = config_name,
            slickgridOptions = slickgrid_options,
            #items=items,
        )),
    )
